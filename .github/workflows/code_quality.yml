name: Code Quality

on: [push]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - id: pylint
        run: |
          pylint_output=$(PYTHONPATH=. pylint src/ --fail-under=8)
          echo "$pylint_output"
          score_line=$(echo "$pylint_output" | grep "Your code has been rated at")
          if [[ $score_line =~ ([0-9]+\.[0-9]+)/10 ]]; then
            score="${BASH_REMATCH[1]}"
          else
            score="unknown"
          fi
          echo "pylint_score=$score" >> $GITHUB_OUTPUT
      - name: Update README badge
        run: |
          score=${{ steps.pylint.outputs.pylint_score }}
          badge="![Pylint Score](https://img.shields.io/badge/pylint-${score//./%2E}%2F10-brightgreen)"
          sed -i "/<!-- PYLINT_BADGE_START -->/,/<!-- PYLINT_BADGE_END -->/c\\<!-- PYLINT_BADGE_START -->\n$badge\n<!-- PYLINT_BADGE_END -->" README.md
      - name: Run flake8
        run: flake8 src/

      - name: Run bandit
        run: bandit -r src/
        continue-on-error: true

      - name: Commit README update
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if ! git diff --quiet; then
            git add README.md
            git commit -m "Update pylint score badge to ${{ steps.pylint.outputs.pylint_score }}"
            git push
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}