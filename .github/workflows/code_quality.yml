name: Code Quality

on:
  pull_request:
    types: [opened, synchronize, labeled]
    branches: [main]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - id: pylint
        run: |
          pylint_output=$(PYTHONPATH=. pylint src/ --fail-under=8)
          echo "$pylint_output"
          score_line=$(echo "$pylint_output" | grep "Your code has been rated at")
          if [[ $score_line =~ ([0-9]+\.[0-9]+)/10 ]]; then
            score="${BASH_REMATCH[1]}"
          else
            score="unknown"
          fi
          echo "pylint_score=$score" >> $GITHUB_OUTPUT

      - name: Update Pylint Badge in README
        run: |
          score=${{ steps.pylint.outputs.pylint_score }}
          badge="![Pylint Score](https://img.shields.io/badge/pylint-${score//./%2E}%2F10-brightgreen)"
          sed -i "/<!-- PYLINT_BADGE_START -->/,/<!-- PYLINT_BADGE_END -->/c\\<!-- PYLINT_BADGE_START -->\n$badge\n<!-- PYLINT_BADGE_END -->" README.md

      - name: Run flake8
        run: flake8 src/

      - name: Run bandit
        run: bandit -r src/
        continue-on-error: true

      - name: Install DVC
        run: pip install dvc[gdrive]

      - name: Set up GDrive credentials for DVC
        run: |
          echo "${{ secrets.GDRIVE_JSON_BASE64 }}" | base64 --decode > gdrive-creds.json
          dvc remote modify storage --local gdrive_use_service_account true
          dvc remote modify storage --local gdrive_service_account_json_file_path gdrive-creds.json

      - name: Pull data and models from DVC
        run: dvc pull

      - name: Run tests and collect coverage
        run: |
          coverage run -m pytest
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Update Coverage Badge in README
        run: |
          coverage_badge="![Coverage](https://codecov.io/github/remla25-team21/model-training/branch/feat%2Fa4-ml-testing/graph/badge.svg?token=L9ICV9K86O)"
          sed -i "/<!-- COVERAGE_BADGE_START -->/,/<!-- COVERAGE_BADGE_END -->/c\\<!-- COVERAGE_BADGE_START -->\n$coverage_badge\n<!-- COVERAGE_BADGE_END -->" README.md

      - name: Calculate ML Test Score
        run: python ml_test_score.py

      - name: Update ML Test Score Table in README
        run: |
          awk '/<!-- ML_TEST_SCORE_START -->/{print;flag=1;next}/<!-- ML_TEST_SCORE_END -->/{flag=0;print;next}!flag' README.md > tmp_README.md
          cat ml_test_score.md >> tmp_README.md
          mv tmp_README.md README.md

      - name: Update ML Test Score Badge
        run: |
          if [ -f ml_test_score_badge.txt ]; then
            badge_url=$(cat ml_test_score_badge.txt)
            badge_md="![ML Test Score]($badge_url)"
            sed -i "/<!-- ML_SCORE_BADGE_START -->/,/<!-- ML_SCORE_BADGE_END -->/c\\<!-- ML_SCORE_BADGE_START -->\n$badge_md\n<!-- ML_SCORE_BADGE_END -->" README.md
          fi

      - name: Commit README update
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if ! git diff --quiet; then
            git add README.md
            git commit -m "Update README with lint, coverage, and ML test score"
            git push
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
